openapi: 3.0.0
tags:
  - name: test
info:
  title: api-mkm
  version: '1.0'
  description: API that provides interface to mkm objects. To be implemented by mkapp service
  license:
    name: MIT
  contact:
    name: prem
    email: myteam@test.com
servers:
  - description: local
    url: 'http://localhost:8082/mkapp/rest/v1'
  - url: 'http://wdnvmhapp11:8082/mkapp/rest/v1'
    description: test
paths:
  /persons:
    get:
      summary: Person - get persons edited recently
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Person'
        '500':
          description: Internal Server Error
      operationId: get-persons
      description: 'Get a list of persons (recently created/modified). '
    parameters: []
    post:
      tags: []
      summary: Person - create
      operationId: post-persons
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
      description: Create a new person (account)
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
            examples:
              1-min:
                value:
                  firstName: Prem
                  lastName: Test
                  email: prem@gmail.com
                  address:
                    streetNum: '123'
                    streetName: My Street
                    postalCode: L1B 0Z0
        description: 'Mandatory for person: first/lastname and one contact. Mandatory for address: streetnum/streetname/postalcode. NO id, NO create/update timestamp '
    patch:
      tags: []
      summary: Person - update some aspect
      operationId: patch-persons
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
              examples: {}
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
      description: Modify details of a person
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
            examples:
              1-lastname:
                value:
                  createTime: '2020-10-18T19:46:56Z'
                  updateTime: '2020-10-18T19:46:56Z'
                  id: 1
                  lastName: Lastname-updated
              example-2:
                value:
                  createTime: '2020-10-18T19:37:24Z'
                  updateTime: '2020-10-18T19:37:24Z'
                  id: 1
                  lastname: LN-addr-updated
                  address:
                    createTime: '2020-10-18T19:37:24Z'
                    updateTime: '2020-10-18T19:37:24Z'
                    id: 0
                    lat: 0
                    lon: 0
                    oneline: string
                    streetNum: string
                    streetName: string
                    city: string
                    country: string
                    postalCode: string
                    state: string
        description: ''
  '/persons/{id}':
    parameters:
      - schema:
          type: number
          example: 1
          minimum: 0
        name: id
        in: path
        required: true
        description: ''
    get:
      summary: Person - by id
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '404':
          description: Not Found
      operationId: get-persons-id
      description: Get one person - by id
      parameters: []
    put:
      tags: []
      summary: Person - replace full (update)
      operationId: put-persons-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
      description: Replace (update) all details of person-id with supplied person details
  /cases:
    get:
      summary: 'Case - get recent, relevant'
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Case'
        '500':
          description: Internal Server Error
      operationId: get-case
      description: 'Get recent, relevant, for e.g based on STATUS=PENDING'
    post:
      tags: []
      summary: Case - create
      operationId: post-case
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Case'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
      description: 'Create a Case, see schema for data validation on Case object.'
    patch:
      tags: []
      summary: Case - update some aspect
      operationId: patch-case
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Case'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
      description: Update some fields of Case object
  '/cases/{id}':
    parameters:
      - schema:
          type: number
          example: 1
          minimum: 0
        name: id
        in: path
        required: true
    get:
      summary: Case - by id
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Case'
              examples: {}
        '404':
          description: Not Found
      operationId: get-case-id
      description: Get one case - by id
    put:
      tags: []
      summary: Case - replace full (update)
      operationId: put-cases-id
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
      description: Replace (update) all details of case-id with supplied case details
  /search/persons:
    post:
      tags: []
      summary: Search - persons similar
      operationId: post-search-persons
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Person'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
      description: 'Find persons that has similar attributes e.g firstname like, ...'
  /search/persons/byaddress:
    post:
      tags: []
      summary: Search - person by address
      operationId: post-search-persons-byaddress
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Person'
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostalAddress'
      description: Find persons that are associated with this address
components:
  schemas:
    Person:
      allOf:
        - $ref: '#/components/schemas/AbstractEntity'
        - type: object
          properties:
            firstName:
              type: string
            lastName:
              type: string
            email:
              type: string
              format: email
              example: me@gmail.com
              minLength: 6
              maxLength: 50
            phone1:
              type: string
              minLength: 5
              maxLength: 20
            phone2:
              type: string
              minLength: 5
              maxLength: 20
            address:
              $ref: '#/components/schemas/PostalAddress'
            xrefs:
              type: array
              items:
                $ref: '#/components/schemas/Xref'
      title: Person
      description: |-
        Data Constraints: 

        - {email|phone1|phone2|address} atleast one of the contact is a MUST, otherwise rejected.
        - if address is not provided, Person will point to an AnonAddress id=0. Makes it easy to curate.
    Case:
      allOf:
        - $ref: '#/components/schemas/AbstractEntity'
        - type: object
          properties:
            status:
              type: string
              description: 'Must be controlled fixed set of states. e.g BACKLOG, AWAIT_TRIAGE, AWAIT_INTERNAL< AWAIT_EXTERNAL, TASKS_DONE, CLOSED.'
            description:
              type: string
            tags:
              type: array
              description: 'store a list of tags that helps routing, categorizing, reporting'
              items:
                type: string
            reportedByCustomer:
              $ref: '#/components/schemas/Person'
            createdByEmployee:
              type: string
              description: just user id of employee
            xrefs:
              type: array
              description: A list of subsystems addressing this case
              items:
                $ref: '#/components/schemas/Xref'
            address:
              $ref: '#/components/schemas/PostalAddress'
            typeId:
              type: string
              description: 'A unque case type id (typically a fixed enum e.g LICENCING_COMMERCIAL, LICENCING_PET, INFRA_WATER, INFRA_GAS). May be used for deptartmental routing or futher classification.'
            typeProps:
              type: object
              additionalProperties: true
              maxProperties: 30
              minProperties: 0
              description: 'A list of key/value json, that will be parsed by program based on specific case''s typeId'
      description: |-
        Case. 

        typeid and typeProps are tightly interlinked
        xrefs - represent the subsystems (or departments) where this "case" related "tasks" are executed. 
        address - address where this case is applicable, e.g if case is about "pothole", location of nearby house, geo etc.

        Constraints: 

        reportedByCustomer.id - must be already present in system, if not defaults to Anon customer
        address.id - mut be alrady present in system, if not defaults to Organization address.
      title: Case
    Xref:
      allOf:
        - $ref: '#/components/schemas/AbstractEntity'
        - type: object
          properties:
            id:
              type: integer
              description: 'MANDATORY, Must be supplied. Please, ignore readonly as it is displayed from AbstractEntity'
            xrefSystemId:
              type: string
              example: 'e.g TAXSYS, WATERSYS, AMANDA ...'
            xrefId:
              type: string
              readOnly: true
              description: id of this object in subsystem. e.g TAXSYS.Person.id
            subsysRefreshTime:
              type: string
              format: date-time
              readOnly: true
              description: 'subsysRefreshTime, will be set by backend processes that may sync golden data to specific subsystem'
      description: |-
        Cross reference in subsystems where a "Person" or "Case" need to be linked/synced/queried/integrated.

        Xref-for-Person entity
        Xref-for-Case entity
      title: Xref
    PostalAddress:
      title: PostalAddress
      allOf:
        - $ref: '#/components/schemas/AbstractGeoEntity'
        - type: object
          description: 'Free form, single line'
          properties:
            oneline:
              type: string
            streetNum:
              type: string
            streetName:
              type: string
            city:
              type: string
            country:
              type: string
            postalCode:
              type: string
            state:
              type: string
      description: |
        Address 

        - may be a 'jurisdiction address' of a city gov, [comes from a fixed list of lookup address]
        - may be a 'contact' postal-address of a person who lives in/out jursdiction [could be in same city/country or other]. Likely may not be parsable. Likely to use online.

        Data constraints assumptions: 

        - Country - if not present, assume it as same country as the organization.
        - postalcode - MUST be present, 
    AbstractEntity:
      title: AbstractEntity
      type: object
      description: |-
        Add to this, all common fields accross entities that are stored separate table'. 

        Example scenario: 

        If 'Address' is stored in CUSTOMER table, do not derive from AbstractEntity. If 'Address' is stored in ADDRESS table, then you MUST do equivalent of 'Address extends AbstractEntity'
      properties:
        id:
          type: integer
          readOnly: true
          description: Read-only. DB is responsible for private _id.
          example: 1
        createTime:
          type: string
          readOnly: true
          description: Read-only. DB is responsible for timestamp.
          example: '2020-10-18T03:11:56Z'
          format: date-time
        updateTime:
          type: string
          readOnly: true
          description: Read-only. DB is responsible for timestamp.
          format: date-time
          example: '2020-10-18T03:11:56Z'
    AbstractGeoEntity:
      allOf:
        - $ref: '#/components/schemas/AbstractEntity'
        - type: object
          properties:
            lat:
              type: number
              example: 27.1751
              default: 0
            lon:
              type: number
              default: 0
              example: 78.0421
      description: 'Geo coordinates. Use for any geologically identifiable entities. E.g lamp post location, approximate place where a tree need to be cut, a building where gas leak need to be fixed.'
      title: AbstractGeoEntity
    ContactChannels:
      title: ContactChannels
      anyOf:
        - properties:
            email:
              type: string
            phone1:
              type: string
            phone2:
              type: string
            postalAddress:
              $ref: '#/components/schemas/PostalAddress'
      type: object
      description: 'Currently NOT USED. Created to express need to abstract "contact" mechanisms, so atleast one of the contact can me made as MANDATORY.'
